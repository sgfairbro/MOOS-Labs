// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mini_command.proto

#ifndef PROTOBUF_mini_5fcommand_2eproto__INCLUDED
#define PROTOBUF_mini_5fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "goby/acomms/protobuf/dccl_option_extensions.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mini_5fcommand_2eproto();
void protobuf_AssignDesc_mini_5fcommand_2eproto();
void protobuf_ShutdownFile_mini_5fcommand_2eproto();

class MiniCommand;

enum MiniCommand_VehicleState {
  MiniCommand_VehicleState_DEPLOY = 1,
  MiniCommand_VehicleState_RETURN = 2
};
bool MiniCommand_VehicleState_IsValid(int value);
const MiniCommand_VehicleState MiniCommand_VehicleState_VehicleState_MIN = MiniCommand_VehicleState_DEPLOY;
const MiniCommand_VehicleState MiniCommand_VehicleState_VehicleState_MAX = MiniCommand_VehicleState_RETURN;
const int MiniCommand_VehicleState_VehicleState_ARRAYSIZE = MiniCommand_VehicleState_VehicleState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiniCommand_VehicleState_descriptor();
inline const ::std::string& MiniCommand_VehicleState_Name(MiniCommand_VehicleState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiniCommand_VehicleState_descriptor(), value);
}
inline bool MiniCommand_VehicleState_Parse(
    const ::std::string& name, MiniCommand_VehicleState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiniCommand_VehicleState>(
    MiniCommand_VehicleState_descriptor(), name, value);
}
// ===================================================================

class MiniCommand : public ::google::protobuf::Message {
 public:
  MiniCommand();
  virtual ~MiniCommand();

  MiniCommand(const MiniCommand& from);

  inline MiniCommand& operator=(const MiniCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiniCommand& default_instance();

  void Swap(MiniCommand* other);

  // implements Message ----------------------------------------------

  MiniCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiniCommand& from);
  void MergeFrom(const MiniCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MiniCommand_VehicleState VehicleState;
  static const VehicleState DEPLOY = MiniCommand_VehicleState_DEPLOY;
  static const VehicleState RETURN = MiniCommand_VehicleState_RETURN;
  static inline bool VehicleState_IsValid(int value) {
    return MiniCommand_VehicleState_IsValid(value);
  }
  static const VehicleState VehicleState_MIN =
    MiniCommand_VehicleState_VehicleState_MIN;
  static const VehicleState VehicleState_MAX =
    MiniCommand_VehicleState_VehicleState_MAX;
  static const int VehicleState_ARRAYSIZE =
    MiniCommand_VehicleState_VehicleState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VehicleState_descriptor() {
    return MiniCommand_VehicleState_descriptor();
  }
  static inline const ::std::string& VehicleState_Name(VehicleState value) {
    return MiniCommand_VehicleState_Name(value);
  }
  static inline bool VehicleState_Parse(const ::std::string& name,
      VehicleState* value) {
    return MiniCommand_VehicleState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 destination = 1;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 1;
  inline ::google::protobuf::int32 destination() const;
  inline void set_destination(::google::protobuf::int32 value);

  // optional .MiniCommand.VehicleState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::MiniCommand_VehicleState state() const;
  inline void set_state(::MiniCommand_VehicleState value);

  // required bool manual_override = 3;
  inline bool has_manual_override() const;
  inline void clear_manual_override();
  static const int kManualOverrideFieldNumber = 3;
  inline bool manual_override() const;
  inline void set_manual_override(bool value);

  // required int32 speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MiniCommand)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_manual_override();
  inline void clear_has_manual_override();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 destination_;
  int state_;
  bool manual_override_;
  ::google::protobuf::int32 speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mini_5fcommand_2eproto();
  friend void protobuf_AssignDesc_mini_5fcommand_2eproto();
  friend void protobuf_ShutdownFile_mini_5fcommand_2eproto();

  void InitAsDefaultInstance();
  static MiniCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// MiniCommand

// required int32 destination = 1;
inline bool MiniCommand::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MiniCommand::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MiniCommand::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MiniCommand::clear_destination() {
  destination_ = 0;
  clear_has_destination();
}
inline ::google::protobuf::int32 MiniCommand::destination() const {
  return destination_;
}
inline void MiniCommand::set_destination(::google::protobuf::int32 value) {
  set_has_destination();
  destination_ = value;
}

// optional .MiniCommand.VehicleState state = 2;
inline bool MiniCommand::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiniCommand::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiniCommand::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiniCommand::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::MiniCommand_VehicleState MiniCommand::state() const {
  return static_cast< ::MiniCommand_VehicleState >(state_);
}
inline void MiniCommand::set_state(::MiniCommand_VehicleState value) {
  assert(::MiniCommand_VehicleState_IsValid(value));
  set_has_state();
  state_ = value;
}

// required bool manual_override = 3;
inline bool MiniCommand::has_manual_override() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MiniCommand::set_has_manual_override() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MiniCommand::clear_has_manual_override() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MiniCommand::clear_manual_override() {
  manual_override_ = false;
  clear_has_manual_override();
}
inline bool MiniCommand::manual_override() const {
  return manual_override_;
}
inline void MiniCommand::set_manual_override(bool value) {
  set_has_manual_override();
  manual_override_ = value;
}

// required int32 speed = 4;
inline bool MiniCommand::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MiniCommand::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MiniCommand::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MiniCommand::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 MiniCommand::speed() const {
  return speed_;
}
inline void MiniCommand::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MiniCommand_VehicleState>() {
  return ::MiniCommand_VehicleState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mini_5fcommand_2eproto__INCLUDED
