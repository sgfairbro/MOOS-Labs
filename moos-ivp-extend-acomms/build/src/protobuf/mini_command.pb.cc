// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mini_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mini_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MiniCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiniCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MiniCommand_VehicleState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mini_5fcommand_2eproto() {
  protobuf_AddDesc_mini_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mini_command.proto");
  GOOGLE_CHECK(file != NULL);
  MiniCommand_descriptor_ = file->message_type(0);
  static const int MiniCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCommand, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCommand, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCommand, manual_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCommand, speed_),
  };
  MiniCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiniCommand_descriptor_,
      MiniCommand::default_instance_,
      MiniCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiniCommand));
  MiniCommand_VehicleState_descriptor_ = MiniCommand_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mini_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiniCommand_descriptor_, &MiniCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mini_5fcommand_2eproto() {
  delete MiniCommand::default_instance_;
  delete MiniCommand_reflection_;
}

void protobuf_AddDesc_mini_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dccl::protobuf_AddDesc_goby_2facomms_2fprotobuf_2fdccl_5foption_5fextensions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022mini_command.proto\0321goby/acomms/protob"
    "uf/dccl_option_extensions.proto\"\334\001\n\013Mini"
    "Command\022-\n\013destination\030\001 \002(\005B\030\242\?\t1\000\000\000\000\000\000"
    "\034@\242\?\t)\000\000\000\000\000\000\000\000\022(\n\005state\030\002 \001(\0162\031.MiniComm"
    "and.VehicleState\022\027\n\017manual_override\030\003 \002("
    "\010\022\'\n\005speed\030\004 \002(\005B\030\242\?\t)\000\000\000\000\000\000\000\000\242\?\t1\000\000\000\000\000\000"
    "\010@\"&\n\014VehicleState\022\n\n\006DEPLOY\020\001\022\n\n\006RETURN"
    "\020\002:\n\242\?\002\010\017\242\?\002\020\002", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mini_command.proto", &protobuf_RegisterTypes);
  MiniCommand::default_instance_ = new MiniCommand();
  MiniCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mini_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mini_5fcommand_2eproto {
  StaticDescriptorInitializer_mini_5fcommand_2eproto() {
    protobuf_AddDesc_mini_5fcommand_2eproto();
  }
} static_descriptor_initializer_mini_5fcommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MiniCommand_VehicleState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniCommand_VehicleState_descriptor_;
}
bool MiniCommand_VehicleState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MiniCommand_VehicleState MiniCommand::DEPLOY;
const MiniCommand_VehicleState MiniCommand::RETURN;
const MiniCommand_VehicleState MiniCommand::VehicleState_MIN;
const MiniCommand_VehicleState MiniCommand::VehicleState_MAX;
const int MiniCommand::VehicleState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MiniCommand::kDestinationFieldNumber;
const int MiniCommand::kStateFieldNumber;
const int MiniCommand::kManualOverrideFieldNumber;
const int MiniCommand::kSpeedFieldNumber;
#endif  // !_MSC_VER

MiniCommand::MiniCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiniCommand::InitAsDefaultInstance() {
}

MiniCommand::MiniCommand(const MiniCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiniCommand::SharedCtor() {
  _cached_size_ = 0;
  destination_ = 0;
  state_ = 1;
  manual_override_ = false;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiniCommand::~MiniCommand() {
  SharedDtor();
}

void MiniCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MiniCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniCommand_descriptor_;
}

const MiniCommand& MiniCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mini_5fcommand_2eproto();
  return *default_instance_;
}

MiniCommand* MiniCommand::default_instance_ = NULL;

MiniCommand* MiniCommand::New() const {
  return new MiniCommand;
}

void MiniCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destination_ = 0;
    state_ = 1;
    manual_override_ = false;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiniCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destination = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
          set_has_destination();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .MiniCommand.VehicleState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiniCommand_VehicleState_IsValid(value)) {
            set_state(static_cast< ::MiniCommand_VehicleState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manual_override;
        break;
      }

      // required bool manual_override = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manual_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_override_)));
          set_has_manual_override();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }

      // required int32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiniCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 destination = 1;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destination(), output);
  }

  // optional .MiniCommand.VehicleState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required bool manual_override = 3;
  if (has_manual_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->manual_override(), output);
  }

  // required int32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiniCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 destination = 1;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destination(), target);
  }

  // optional .MiniCommand.VehicleState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required bool manual_override = 3;
  if (has_manual_override()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->manual_override(), target);
  }

  // required int32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiniCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 destination = 1;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destination());
    }

    // optional .MiniCommand.VehicleState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required bool manual_override = 3;
    if (has_manual_override()) {
      total_size += 1 + 1;
    }

    // required int32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiniCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiniCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiniCommand::MergeFrom(const MiniCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destination()) {
      set_destination(from.destination());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_manual_override()) {
      set_manual_override(from.manual_override());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiniCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniCommand::CopyFrom(const MiniCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void MiniCommand::Swap(MiniCommand* other) {
  if (other != this) {
    std::swap(destination_, other->destination_);
    std::swap(state_, other->state_);
    std::swap(manual_override_, other->manual_override_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiniCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiniCommand_descriptor_;
  metadata.reflection = MiniCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
