// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CTDMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTDMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctd_2eproto() {
  protobuf_AddDesc_ctd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctd.proto");
  GOOGLE_CHECK(file != NULL);
  CTDMessage_descriptor_ = file->message_type(0);
  static const int CTDMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTDMessage, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTDMessage, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTDMessage, salinity_),
  };
  CTDMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTDMessage_descriptor_,
      CTDMessage::default_instance_,
      CTDMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTDMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTDMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTDMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTDMessage_descriptor_, &CTDMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctd_2eproto() {
  delete CTDMessage::default_instance_;
  delete CTDMessage_reflection_;
}

void protobuf_AddDesc_ctd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dccl::protobuf_AddDesc_goby_2facomms_2fprotobuf_2fdccl_5foption_5fextensions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tctd.proto\0321goby/acomms/protobuf/dccl_o"
    "ption_extensions.proto\"\255\001\n\nCTDMessage\022,\n"
    "\005depth\030\001 \003(\005B\035\242\?\t1\000\000\000\000\000@\217@\242\?\t)\000\000\000\000\000\000\000\000\242\?"
    "\002P\005\022/\n\013temperature\030\002 \003(\005B\032\242\?\002P\005\242\?\022\n\020lab1"
    "2_arithmetic\0224\n\010salinity\030\003 \003(\001B\"\242\?\t1\000\000\000\000"
    "\000\000D@\242\?\t)\000\000\000\000\000\0009@\242\?\002 \002\242\?\002P\005:\n\242\?\002\010f\242\?\002\020 ", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctd.proto", &protobuf_RegisterTypes);
  CTDMessage::default_instance_ = new CTDMessage();
  CTDMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctd_2eproto {
  StaticDescriptorInitializer_ctd_2eproto() {
    protobuf_AddDesc_ctd_2eproto();
  }
} static_descriptor_initializer_ctd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CTDMessage::kDepthFieldNumber;
const int CTDMessage::kTemperatureFieldNumber;
const int CTDMessage::kSalinityFieldNumber;
#endif  // !_MSC_VER

CTDMessage::CTDMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTDMessage::InitAsDefaultInstance() {
}

CTDMessage::CTDMessage(const CTDMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTDMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTDMessage::~CTDMessage() {
  SharedDtor();
}

void CTDMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTDMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTDMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTDMessage_descriptor_;
}

const CTDMessage& CTDMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctd_2eproto();
  return *default_instance_;
}

CTDMessage* CTDMessage::default_instance_ = NULL;

CTDMessage* CTDMessage::New() const {
  return new CTDMessage;
}

void CTDMessage::Clear() {
  depth_.Clear();
  temperature_.Clear();
  salinity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTDMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 depth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_depth())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_depth())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_depth;
        if (input->ExpectTag(16)) goto parse_temperature;
        break;
      }

      // repeated int32 temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_temperature())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_temperature())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_temperature;
        if (input->ExpectTag(25)) goto parse_salinity;
        break;
      }

      // repeated double salinity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_salinity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_salinity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_salinity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_salinity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTDMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 depth = 1;
  for (int i = 0; i < this->depth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->depth(i), output);
  }

  // repeated int32 temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->temperature(i), output);
  }

  // repeated double salinity = 3;
  for (int i = 0; i < this->salinity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->salinity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTDMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 depth = 1;
  for (int i = 0; i < this->depth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->depth(i), target);
  }

  // repeated int32 temperature = 2;
  for (int i = 0; i < this->temperature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->temperature(i), target);
  }

  // repeated double salinity = 3;
  for (int i = 0; i < this->salinity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->salinity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTDMessage::ByteSize() const {
  int total_size = 0;

  // repeated int32 depth = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->depth_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->depth(i));
    }
    total_size += 1 * this->depth_size() + data_size;
  }

  // repeated int32 temperature = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->temperature_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->temperature(i));
    }
    total_size += 1 * this->temperature_size() + data_size;
  }

  // repeated double salinity = 3;
  {
    int data_size = 0;
    data_size = 8 * this->salinity_size();
    total_size += 1 * this->salinity_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTDMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTDMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTDMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTDMessage::MergeFrom(const CTDMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  depth_.MergeFrom(from.depth_);
  temperature_.MergeFrom(from.temperature_);
  salinity_.MergeFrom(from.salinity_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTDMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTDMessage::CopyFrom(const CTDMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTDMessage::IsInitialized() const {

  return true;
}

void CTDMessage::Swap(CTDMessage* other) {
  if (other != this) {
    depth_.Swap(&other->depth_);
    temperature_.Swap(&other->temperature_);
    salinity_.Swap(&other->salinity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTDMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTDMessage_descriptor_;
  metadata.reflection = CTDMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
