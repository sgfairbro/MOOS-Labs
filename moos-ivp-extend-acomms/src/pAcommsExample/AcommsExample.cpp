/************************************************************/
/*    NAME: Toby Schneider                                  */
/*    ORGN: MIT                                             */
/*    FILE: AcommsExample.cpp                               */
/*    DATE: 2012-03-12                                      */
/************************************************************/

#include <limits>
#include <cstdlib> // for rand()
#include "goby/moos/moos_protobuf_helpers.h" // for goby::moos::MOOSTranslation
#include "goby/acomms/dccl.h" // for goby::acomms::DCCLCodec
#include "codecs/codec_load.h"

#include "AcommsExample.h"
//---------------------------------------------------------
// Constructor

AcommsExample::AcommsExample() :
    start_time_(MOOSTime()),
    post_interval1_(std::numeric_limits<double>::infinity()),
    post_interval2_(std::numeric_limits<double>::infinity())
{
    goby::acomms::DCCLCodec* dccl = goby::acomms::DCCLCodec::get();
    goby_dccl_load(dccl);
    dccl->validate<AcommsExampleMessage1>();
    dccl->validate<AcommsExampleMessage2>();
    std::cout << *dccl << std::endl;
    
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool AcommsExample::OnNewMail(MOOSMSG_LIST &NewMail)
{
   
    for(MOOSMSG_LIST::iterator it=NewMail.begin(), end=NewMail.end();
        it!=end;
        it++)
    {
        CMOOSMsg& msg = *it;
    }
	
    return(true);
}

//---------------------------------------------------------
// Procedure: OnConnectToServer

bool AcommsExample::OnConnectToServer()
{
    m_MissionReader.GetConfigurationParam("out_moos_var1", out_moos_var1_);	
    m_MissionReader.GetConfigurationParam("out_moos_var2", out_moos_var2_);	
    m_MissionReader.GetConfigurationParam("post_interval1", post_interval1_);	
    m_MissionReader.GetConfigurationParam("post_interval2", post_interval2_);	
    return(true);
}

//---------------------------------------------------------
// Procedure: Iterate()

bool AcommsExample::Iterate()
{
    // is it time to send a message?
    // keep track of the message count
    static int i1 = 0;
    if(MOOSTime() > ((i1+1)*post_interval1_+ 5 + start_time_))
    {

        // create a Protobuf message (AcommsExampleMessage1 autogenerated from acomms_message.proto)
        AcommsExampleMessage1 msg;
        msg.set_time(MOOSTime());
        msg.set_index(i1);
        msg.set_random(rand() % 100);
        msg.set_sender(TES);


        // serialize the protobuf message into a string suitable for MOOS
        std::string text_format_serialized;
        using goby::moos::protobuf::TranslatorEntry;
        goby::moos::MOOSTranslation<TranslatorEntry::TECHNIQUE_PROTOBUF_TEXT_FORMAT>::serialize(
            &text_format_serialized, msg);

        
        // post the serialized string
        m_Comms.Notify(out_moos_var1_, text_format_serialized);
        
        std::cout << "Wrote to: [" << out_moos_var1_ << "]: ["
                  << text_format_serialized << "]" << std::endl; 
        std::cout << "Sizes (bytes): TextFormat: " << text_format_serialized.size()
                  << ", Native Protobuf: " << msg.ByteSize()
                  << ", DCCL: " <<  goby::acomms::DCCLCodec::get()->size(msg) << std::endl;
        ++i1;
    }
    
    
    static int i2 = 0;
    if(MOOSTime() > ((i2+1)*post_interval2_ + 5 + start_time_))
    {
        static bool b = true;
        
        AcommsExampleMessage2 msg;
        msg.set_index(i2);
        msg.set_toggle(b);
        b = !b;
        msg.set_time(MOOSTime());
        msg.set_sender(HENRIK);

        std::string text_format_serialized;
        using goby::moos::protobuf::TranslatorEntry;
        goby::moos::MOOSTranslation<TranslatorEntry::TECHNIQUE_PROTOBUF_TEXT_FORMAT>::serialize(
            &text_format_serialized, msg);
        
        // post the serialized string
        m_Comms.Notify(out_moos_var2_, text_format_serialized);
        
        std::cout << "Wrote to: [" << out_moos_var2_ << "]: ["
                  << text_format_serialized << "]" << std::endl; 
        std::cout << "Sizes (bytes): TextFormat: " << text_format_serialized.size()
                  << ", Native Protobuf: " << msg.ByteSize()
                  << ", DCCL: " <<  goby::acomms::DCCLCodec::get()->size(msg) << std::endl;
        ++i2;
    }

    
    return(true);
}

